@page "/signals"
@inject HttpClient Http

<h3>Trading Signals</h3>

@if (isLoading)
{
    <p>Loading signals...</p>
}
else if (signals != null && signals.Count > 0)
{
    foreach (var signal in signals)
    {
        <div>
            <h4>@signal.Symbol</h4>
            <p>@signal.Rationale</p>
            <p>Entry Point: @signal.EntryPoint</p>
            <p>Stop Loss: @signal.StopLoss</p>
            <p>Take Profit: @signal.TakeProfit</p>
        </div>
    }
}
else
{
    <p>No signals available.</p>
}

<!-- PayPal Button -->
<div>
    <h4>Access 5 Signals for R100</h4>
    <div id="paypal-button-container"></div>
</div>

@code {
    private List<Signal> signals = new();
    private bool isLoading = true;

    // PayPal Merchant Details (Read from config.json)
    private string paypalClientId = string.Empty;  // PayPal Client ID (from config.json)
    private decimal signalPrice = 100.00m; // Price for 5 signals (from config.json)

    // Initialize when component is ready
    protected override async Task OnInitializedAsync()
    {
        signals = await FetchSignalsFromJsonFile() ?? new List<Signal>();
        isLoading = false;

        // Initialize PayPal with the client ID and signal price from the config
        InitializePayPal();
    }

    // Fetch the trading signals from config.json
    private async Task<List<Signal>> FetchSignalsFromJsonFile()
    {
        try
        {
            // Fetch the signals from the config.json file
            var response = await Http.GetFromJsonAsync<TradingSignals>("config.json");

            // Update PayPal details from config.json
            if (response?.PayPal != null)
            {
                paypalClientId = response.PayPal.ClientId;
                signalPrice = response.PayPal.SignalPrice;
            }

            // Return the list of signals from config.json or an empty list
            return response?.SignalsInfo?.Signals ?? new List<Signal>();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error fetching signals: {ex.Message}");
            return new List<Signal>(); // Return empty list on error
        }
    }

    // Initialize PayPal button integration with JS interop
    private void InitializePayPal()
    {
        var script = $@"
            <script src='https://www.paypal.com/sdk/js?client-id={paypalClientId}'></script>
            <script>
                paypal.Buttons({{
                    createOrder: function(data, actions) {{
                        return actions.order.create({{
                            purchase_units: [{{
                                amount: {{
                                    value: '{signalPrice}'
                                }}
                            }}]
                        }});
                    }},
                    onApprove: function(data, actions) {{
                        return actions.order.capture().then(function(details) {{
                            alert('Transaction completed by ' + details.payer.name.given_name);
                            // Handle successful transaction logic here
                        }});
                    }}
                }}).render('#paypal-button-container');
            </script>";

        // Inject the PayPal script into the page (depending on your setup for JS interop in Blazor)
    }

    // Signal class to match the structure from Python (Lonsigy1.py)
    public class Signal
    {
        public string Symbol { get; set; } = string.Empty;  // Initialize to avoid nullability warning
        public string Rationale { get; set; } = string.Empty;  // Initialize to avoid nullability warning
        public decimal EntryPoint { get; set; }
        public decimal StopLoss { get; set; }
        public decimal TakeProfit { get; set; }
    }

    // Class for data structure in config.json
    public class TradingSignals
    {
        public PayPalInfo PayPal { get; set; } = new PayPalInfo();  // Initialize the PayPalInfo object
        public TradingSignalsInfo SignalsInfo { get; set; } = new TradingSignalsInfo();  // Initialize the SignalsInfo object
    }

    // PayPal details structure
    public class PayPalInfo
    {
        public string ClientId { get; set; } = string.Empty;  // Initialize to avoid nullability warning
        public decimal SignalPrice { get; set; }
    }

    // Trading signals structure (matching the signals from the Python code)
    public class TradingSignalsInfo
    {
        public List<Signal> Signals { get; set; } = new List<Signal>();  // Initialize the list to avoid nullability warning
    }
}
